{"id":436889440,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1609442740,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/436889440/","is_pending":"Not Pending","title":"Maximum XOR With an Element From Array","memory":"N/A","code":"class Solution {\npublic:\n    \n    struct node{\n        node* next[2];\n    };\n    void add(node* root, int x){\n        for(int i = 31;i>=0;i--){\n            int bit = x>>i&1;\n            if(!root->next[bit]){\n                root->next[bit] = new node();\n            }\n            root = root->next[bit];\n        }\n    }\n    int solve(node* root,int x){\n        int ans = 0;\n        for(int i = 31;i>=0;i--){\n            int bit = x>>i&1;\n            if(root->next[bit^1]){\n                root = root->next[bit^1];\n                ans|=(1<<i);\n            }else{\n                if(root->next[bit]){\n                    root = root->next[bit];\n                }else{\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n    node *root;\n    int N,M;\n    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {\n        N = nums.size(); M = queries.size();\n        \n        map<vector<int>,int> m1; int pos = 0;\n        for(auto q: queries){\n            m1[q]= pos++;\n        }\n        sort(nums.begin(),nums.end());\n        sort(queries.begin(),queries.end(),[&](vector<int> a,vector<int>b){return a[1] < b[1];});\n\n        vector<int> ans(M);\n        root = new node();\n        for(int j = 0, i =0;j<M;j++){\n            while(i < N && nums[i] <= queries[j][1]){\n                add(root,nums[i++]);\n            }\n            cout << m1[queries[j]] << \" \";\n            ans[m1[queries[j]]] = i>0?solve(root,queries[j][0]):-1;\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111000000010011110011000000111101000111000000000000000000","title_slug":"maximum-xor-with-an-element-from-array"}