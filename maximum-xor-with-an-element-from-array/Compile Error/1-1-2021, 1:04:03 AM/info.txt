{"id":436891796,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1609443243,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/436891796/","is_pending":"Not Pending","title":"Maximum XOR With an Element From Array","memory":"N/A","code":"class Solution {\npublic:\n    \n    struct node{\n        node* next[2];\n    };\n    struct query{\n        int x,m,idx;\n    };\n    vector<query> Q;\n    void add(node* root, int x){\n        for(int i = 31;i>=0;i--){\n            int bit = x>>i&1;\n            if(!root->next[bit]){\n                root->next[bit] = new node();\n            }\n            root = root->next[bit];\n        }\n    }\n    int solve(node* root,int x){\n        int ans = 0;\n        for(int i = 31;i>=0;i--){\n            int bit = x>>i&1;\n            if(root->next[bit^1]){\n                root = root->next[bit^1];\n                ans|=(1<<i);\n            }else{\n                if(root->next[bit]){\n                    root = root->next[bit];\n                }else{\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n    node *root;\n    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {\n        int N = nums.size(); M = queries.size();\n        Q.resize(M);\n        for(int i = 0;i<M;i++){\n            Q[i].x = queries[i][0],Q[i].m = queries[i][1];Q[i].idx = i;\n        }\n        sort(nums.begin(),nums.end());\n        sort(Q.begin(),Q.end(),[&](query a,query b){return a.m < b.m;});\n\n        vector<int> ans(M);\n        root = new node();\n        for(int j = 0, i =0;j<M;j++){\n            while(i < N && nums[i] <= Q[j].m){\n                add(root,nums[i++]);\n            }\n            ans[Q[j].idx] = i>0?solve(root,Q[j].x):-1;\n        }\n        return ans;\n    }\n};","compare_result":null,"title_slug":"maximum-xor-with-an-element-from-array"}