{"id":383375779,"lang":"cpp","time":"1 year, 4 months","timestamp":1597869053,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/383375779/","is_pending":"Not Pending","title":"Minimum Moves to Move a Box to Their Target Location","memory":"N/A","code":"class Solution {\n    \n    int dx[4] = {0,1,0,-1};\n    int dy[4] = {1,0,-1,0};\n    \npublic:\n    int n,m;\n    \n    bool valid(vector<vector<char>>& grid,int i,int j ){\n        if(i < 0 || j < 0 || i >=n || j>=n) return false;\n        if(grid[i][j] == '#') return false;\n        return true;\n    }\n    \n    \n    bool dfs(vector<vector<char>>&grid,int px,int py,int npx,int npy,vector<vector<int>> &vis){\n        if(!valid(grid,px,py) || vis[px][py] == 1 ) return 0;\n        vis[px][py] = 1;\n        if(px == npx && py == npy) return 1;\n        bool found = 0;\n        for(int k = 0;k<4;k++){\n            found |= dfs(grid,px+dx[k],py+dy[k],npx,npy,vis);\n        }\n        return found;\n    }\n    bool canwalk(vector<vector<char>>&grid,int px,int py,int npx,int npy){\n        vector<vector<int>> vis(n,vector<int>(m,0));\n        if(dfs(grid,px,py,npx,npy,vis)) return true;\n        return false;\n    }\n        \n        \n        \n    \n    int minPushBox(vector<vector<char>>& grid) {\n        n = grid.size();\n        m = grid[0].size();\n        \n        int S=-1,B=-1,T=-1;\n        for(int i = 0;i<n;i++){\n            for(int j = 0;j<m;j++){\n                if(grid[i][j] == 'S') S = i*n+j,grid[i][j] ='.';\n                if(grid[i][j] == 'B') B = i*n+j,grid[i][j] ='.';\n                if(grid[i][j] == 'T') T = i*n+j,grid[i][j] ='.';\n            }\n        }\n        \n        queue<pair<int,int>> qq;\n        qq.push({S,B});\n        int ans = 0;\n        while(qq.size()){\n            ans += 1;\n            \n            for(int i = 0;i<qq.size();i++){\n                int p = qq.front().first;\n                int b = qq.front().second;\n                qq.pop();\n                \n                \n                int px = p/n,py = p%n;\n                int bx = b/n,by = b%n;\n                \n                \n                // cout << px << \" \" << py << \" \" << bx << \" \" << by << endl;\n                if(b == T) return ans;\n                \n                for(int k = 0;k<4;k++){\n                    int nbx = bx + dx[k];\n                    int nby = by + dy[k];\n                    \n                    int npx = bx - dx[k];\n                    int npy = by - dy[k];\n                    \n                    \n                    if(valid(grid,nbx,nby) && valid(grid,npx,npy)){\n                        grid[bx][by] = '#';\n                        bool cw = canwalk(grid,px,py,npx,npy);\n                            // cout << cw << \" \" << px << \" \" << py << \" \" << npx << \" \" << npy << endl;\n                        if(cw){\n                            qq.push({bx*n+by,nbx*n+nby});\n                        }\n                        grid[bx][by] = '.';\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n};","compare_result":"110100000000000000","title_slug":"minimum-moves-to-move-a-box-to-their-target-location"}