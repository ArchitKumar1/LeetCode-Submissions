{"id":458391806,"lang":"cpp","time":"10Â months","timestamp":1613835014,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/458391806/","is_pending":"Not Pending","title":"Form Array by Concatenating Subarrays of Another Array","memory":"N/A","code":"class Solution {\npublic:\n    bool canChoose(vector<vector<int>>& groups, vector<int>& nums) {\n        \n        int n = nums.size();\n        int m = groups.size();\n        map<vector<int>,int> m1;\n        \n        int dp[m+1][n+1];\n        \n        memset(dp,-1,sizeof(dp));\n        function<bool(int,int)> dfs = [&](int g,int i) -> bool{\n            if(g == m)return 1;\n            if(i == n) return 0;\n            \n            if(dp[g][i]!= -1)return dp[g][i];\n            vector<int> curr;\n            bool ans = 0;\n            ans|= dfs(g,i+1);\n            for(int j = i;j<n;j++){\n                curr.push_back(nums[j]);\n                if(curr == groups[g]){\n                    ans |= dfs(g+1,j+1);\n                    break;\n                }\n            }\n            return dp[g][i] = ans; \n        };\n        return dfs(0,0);\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000","title_slug":"form-array-by-concatenating-subarrays-of-another-array"}