{"id":209320650,"lang":"cpp","time":"2 years, 10 months","timestamp":1550673024,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/209320650/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int cam1 = -1;\n    int cam2 = -1;\n    void dfs1(TreeNode* root,int state){\n        if(root == NULL) return;\n        if(state == 0){\n            cam1++;\n            state=1;\n        }\n        else{\n            state=0;\n        }\n        dfs1(root->right,state);\n        dfs1(root->left,state);\n    }\n    void dfs2(TreeNode* root,int state){\n        if(root == NULL) return;\n        if(state == 0){\n            cam2++;\n            state=1;\n        }\n        else{\n            state=0;\n        }\n        dfs2(root->right,state);\n        dfs2(root->left,state);\n    }\n    int depth(TreeNode* root){\n        if(root == NULL)\n            return 0;\n        return 1+max(depth(root->right),depth(root->left));\n    }\n    int minCameraCover(TreeNode* root) {\n        dfs1(root,0);\n        dfs2(root,1);\n        return min(cam1,cam2);\n    }\n};","compare_result":"00000000000000000000000000000000000000000000000000000000000000000001101011111110000000010100011011011111111100100101010011111111111011011100111001011111010100110000000000","title_slug":"binary-tree-cameras"}