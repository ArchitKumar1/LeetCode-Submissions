{"id":209319625,"lang":"cpp","time":"2 years, 10 months","timestamp":1550672568,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/209319625/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int cam = 0;\n    int odd = 0;\n    int even = 0;\n    void dfs(TreeNode* root,int depth){\n        if(root == NULL)\n            return;\n        depth% 2 == 0 ? even++ : odd++;\n        \n        dfs(root->left,depth+1);\n        dfs(root->right,depth+1);\n    }\n    int depth(TreeNode* root){\n        if(root == NULL)\n            return 0;\n        return 1+max(depth(root->right),depth(root->left));\n    }\n    int minCameraCover(TreeNode* root) {\n        dfs(root,1);\n        if(depth(root) == 1)\n            return 1;\n        return even;\n    }\n};","compare_result":"11111110111111111111111111011111111011001001111001001101111111101110010000000000001111001001100100000000000000001000001000000000000100000000000000100000000000000000000000","title_slug":"binary-tree-cameras"}