{"id":209322057,"lang":"cpp","time":"2 years, 10 months","timestamp":1550673684,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/209322057/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int cam1 = 0;\n    int cam2 = 0;\n    int odd = 0,even = 0;\n    void dfs(TreeNode* root,int depth){\n        if(root == NULL) return;\n        (depth % 2 == 0) ? even++ : odd++;\n        dfs(root->right,depth + 1);\n        dfs(root->left,depth + 1);\n    }\n    // void dfs1(TreeNode* root,int state){\n    //     if(root == NULL) return;\n    //     if(state == 0){\n    //         cam1++;\n    //         state=1;\n    //     }\n    //     else{\n    //         state=0;\n    //     }\n    //     dfs1(root->right,state);\n    //     dfs1(root->left,state);\n    // }\n    // void dfs2(TreeNode* root,int state){\n    //     if(root == NULL) return;\n    //     if(state == 0){\n    //         cam2++;\n    //         state=1;\n    //     }\n    //     else{\n    //         state=0;\n    //     }\n    //     dfs2(root->right,state);\n    //     dfs2(root->left,state);\n    // }\n    int depth(TreeNode* root){\n        if(root == NULL)\n            return 0;\n        return 1+max(depth(root->right),depth(root->left));\n    }\n    int minCameraCover(TreeNode* root) {\n        if(depth(root) == 1) return 1;\n        dfs(root,0);\n        return min(odd,even);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111110010100000001111111101001100100100000000011001010001100000000000100000010000100100000000000000000000000","title_slug":"binary-tree-cameras"}