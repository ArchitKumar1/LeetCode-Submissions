{"id":500419777,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1622387918,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/500419777/","is_pending":"Not Pending","title":"Process Tasks Using Servers","memory":"N/A","code":"\nclass Solution {\npublic:\n    vector<int> assignTasks(vector<int>& servers, vector<int>& tasks) {\n        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<tuple<int,int,int>>> used;\n        int n = servers.size();\n        int m = tasks.size();\n        int pos= 0;\n        priority_queue<tuple<int,int>,vector<tuple<int,int>>,greater<tuple<int,int>>> free;\n        for(auto x : servers){\n            free.emplace(x,pos++);\n        }\n        vector<int>res(m);\n        \n        queue<int> q;\n        int j = 0;\n\n        for(int i = 0; i < m;i++){\n            while(used.size() && get<0>(used.top()) <= i){\n                int t,w,p; tie(t,w,p) = used.top();\n                used.pop();\n                free.push({w,p});\n            }\n            if(free.size()==0){\n                int t,w,p; tie(t,w,p) = used.top();\n                res[i] = p;\n                used.pop();\n                used.push({i+tasks[i],w,p});\n            }\n            else{\n                int w,p; tie(w,p) = free.top();\n                res[i] = p;\n                free.pop();\n                used.push({i+tasks[i],w,p});\n            }\n        }\n        return res;\n    }\n};","compare_result":"1111101011111101001111111110101101","title_slug":"process-tasks-using-servers"}