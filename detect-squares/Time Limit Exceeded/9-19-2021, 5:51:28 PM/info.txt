{"id":557484648,"lang":"cpp","time":"3Â months","timestamp":1632054088,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/557484648/","is_pending":"Not Pending","title":"Detect Squares","memory":"N/A","code":"struct HASH{\n  size_t operator()(const array<int,2>&x)const{\n    return hash<long long>()(((long long)x[0])^(((long long)x[1])<<32));\n  }\n};\nclass DetectSquares {\npublic:\n    int dx[4] = {1,1,-1,-1};\n    int dy[4] = {-1,1,-1,1};\n    unordered_map<array<int,2>,int,HASH> m1;\n    DetectSquares() {\n        m1.reserve(5000);\n        m1.max_load_factor(0.25);\n    }\n    int OFFSET = 1100;\n    void add(vector<int> point) {\n        \n        m1[{point[0] + OFFSET,point[1] + OFFSET}]++;\n    }\n   \n    int N = 1000;\n    int count(vector<int> point) {\n        int ans = 0;\n        for(int k = 0;k < 4;k++){\n            int x = point[0] + OFFSET;\n            int y = point[1] + OFFSET;\n            array<int,2> a = {x,y},b= {x,y},c = {x,y},d = {x,y};\n            int M = N;\n            while(M--){\n                if( c[0] - OFFSET > 1000 || c[1] - OFFSET > 1000 || c[0] - OFFSET < 0 || c[1] - OFFSET< 0 ) break;\n\n                a[0] += dx[k];\n                b[1] += dy[k];\n                c[0] += dx[k];\n                c[1] += dy[k];\n                int cnt = m1[a] * m1[b] * m1[c];\n                ans += cnt;\n            }\n        }\n        return ans;\n    \n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj->add(point);\n * int param_2 = obj->count(point);\n */","compare_result":"111111111111111111111111111111111111111111111100000","title_slug":"detect-squares"}