{"id":557485821,"lang":"cpp","time":"3Â months","timestamp":1632054350,"status_display":"Accepted","runtime":"280 ms","url":"/submissions/detail/557485821/","is_pending":"Not Pending","title":"Detect Squares","memory":"143.8 MB","code":"struct HASH{\n  size_t operator()(const array<int,2>&x)const{\n    return hash<long long>()(((long long)x[0])^(((long long)x[1])<<32));\n  }\n};\nclass DetectSquares {\npublic:\n    int m1[1001][1001] = {};\n    int dx[4] = {1,1,-1,-1};\n    int dy[4] = {-1,1,-1,1};\n    DetectSquares() {\n    }\n    void add(vector<int> point) {\n        m1[point[0]][point[1]]++;\n    }\n  \n    int count(vector<int> point) {\n        long long ans = 0;\n        for(int k = 0;k < 4;k++){\n            int x = point[0];\n            int y = point[1];\n            array<int,2> a = {x,y},b= {x,y},c = {x,y},d = {x,y};\n            while(true){\n                a[0] += dx[k];\n                b[1] += dy[k];\n                c[0] += dx[k];\n                c[1] += dy[k];\n                if( c[0] > 1000 || c[1]> 1000 || c[0] < 0 || c[1]< 0 ) break;\n                long long cnt = 1LL* m1[a[0]][a[1]] *  m1[b[0]][b[1]] *  m1[c[0]][c[1]] ;\n                ans += cnt;\n            }\n        }\n        return ans;\n    \n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj->add(point);\n * int param_2 = obj->count(point);\n */","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"detect-squares"}