{"id":490742560,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1620541737,"status_display":"Accepted","runtime":"564 ms","url":"/submissions/detail/490742560/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"185.5 MB","code":"namespace y_combinator_namespace{\n    template<class Fun>\n    class y_combinator_result {\n        Fun fun_;\n    public:\n        template<class T>\n        explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\n\n        template<class ...Args>\n        decltype(auto) operator()(Args &&...args) {\n            return fun_(std::ref(*this), std::forward<Args>(args)...);\n        }\n    };\n\n    template<class Fun>\n    decltype(auto) y_combinator(Fun &&fun) {\n        return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));\n    }\n}\nusing namespace y_combinator_namespace;\n\n\nconst int MAXN = 1e5+1;\n\nclass Solution {\npublic:\n    int dp[MAXN][26];\n    int largestPathValue(string colors, vector<vector<int>>& edges) {\n        \n        int N = colors.size();\n        vector<int> G[N];\n        vector<int> col(N,-1);\n        \n        bool cycle = 0;\n        for(auto x : edges){\n            G[x[0]].push_back(x[1]); \n        }\n        \n        auto dfs = y_combinator([&](auto self,int s) -> void{            \n            int color = colors[s] -'a';\n            col[s] = 0;\n            for(int c : G[s]){\n                if(col[c] ==  0){\n                    cycle = 1;\n                }else if(col[c]== -1){\n                    self(c);\n                }\n            }\n            int ans = 0;\n            for(int c : G[s]){\n                for(int i = 0; i < 26;i++){\n                    dp[s][i] = max(dp[s][i],dp[c][i]);\n                }\n            }\n            dp[s][color]++;\n            col[s] = 1;\n        });\n        \n        for(int i = 0; i< N;i++){\n            if(col[i] == -1) dfs(i);\n        }\n        int ans = 0;\n        for(int i = 0;i < N;i++){\n            for(int j = 0;j < 26;j++){\n                //if(j < 6) cout << i << \" \" << j << \" \" << dp[i][j] << endl;\n                ans = max(ans,dp[i][j]);\n            }\n        }\n        return cycle? -1 : ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph"}