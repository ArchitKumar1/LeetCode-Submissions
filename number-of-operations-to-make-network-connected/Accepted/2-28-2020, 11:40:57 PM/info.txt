{"id":307737598,"lang":"cpp","time":"1 year, 9 months","timestamp":1582913457,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/307737598/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"58.5 MB","code":"class Solution {\npublic:\n    vector<vector<int>> G;\n    vector<int> temp;\n    vector<int> vis;\n    // int find(int v){\n    //     return (par[v] == v ? v : par[v] = find(par[v]));\n    // }\n    // void merge(int a,int b){\n    //     a = find(a);\n    //     b = find(b);\n    //     if(a == b) return;\n    //     par[a] = b;\n    // }\n    void dfs(int s){\n        vis[s] = 1;\n        temp.push_back(s);\n        for(int c : G[s]){\n            if(vis[c] == 0){\n                dfs(c);\n            }\n        }\n    }\n    int makeConnected(int n, vector<vector<int>>& c) {\n        G.resize(n+1);\n        vis.assign(n,0);\n        for(auto v : c){\n            G[v[0]].push_back(v[1]);\n            G[v[1]].push_back(v[0]);\n        }\n        vector<vector<int>> cc;\n        for(int  i= 0;i<n;i++){\n            if(vis[i] == 1) continue;\n            temp.clear();\n            dfs(i);\n            cc.push_back(temp);\n        }\n        int extra = 0;\n        int needed = cc.size() - 1;\n        \n        for(auto v : cc){\n            int edges = 0;\n            for(int s : v){\n                edges += G[s].size();\n            }\n            edges/=2;\n            extra += (edges - v.size() + 1);\n        }\n        cout << extra << \" \" << needed << endl;\n        if(extra >= needed){\n            return needed;\n        }else{\n            return -1;\n        }\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}