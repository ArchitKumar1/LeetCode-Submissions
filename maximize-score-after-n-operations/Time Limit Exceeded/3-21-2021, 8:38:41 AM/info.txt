{"id":470401039,"lang":"cpp","time":"9 months, 1 week","timestamp":1616296121,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/470401039/","is_pending":"Not Pending","title":"Maximize Score After N Operations","memory":"N/A","code":"class Solution {\npublic:\n    int maxScore(vector<int>& nums) {\n        \n        int n = nums.size();\n        int OP = n/2;\n        int dp[1 << n][OP+1];\n        memset(dp,0,sizeof(dp));\n        \n        vector<int> bit[1 << n];\n        for(int m = 0;m < 1 << n;m++){\n            bit[m].reserve(n);\n            for(int i = 0;i<n;i++){\n                if(m>>i&1){\n                    bit[m].push_back(i);\n                }\n            }\n        }\n        for(int op = 1;op <= OP;op++ ){\n            for(int m = 0;m < 1 << n;m++){\n                dp[m][op] = max(dp[m][op],dp[m][op-1]);\n                int bits = __builtin_popcount(m);\n                if(bits < 2) continue;\n                for(int x = 0;x< bit[m].size();x++){\n                    for(int y = x+1;y<bit[m].size();y++){\n                        int i = bit[m][x],j = bit[m][y];\n                        if( m>>i&1 && m>>j&1){\n                            int nm = m ^ (1 << i) ^ (1 << j);\n                            dp[m][op] = max(dp[m][op],dp[nm][op-1] + op*__gcd(nums[i],nums[j]));\n                        }\n                    }\n                }\n            }\n        }\n        return dp[-1 + (1 << n)][OP];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-score-after-n-operations"}