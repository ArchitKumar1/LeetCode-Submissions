{"id":517038277,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1625368528,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/517038277/","is_pending":"Not Pending","title":"Longest Common Subpath","memory":"N/A","code":"class dsu {\n    public:\n    vector<int> par;\n    vector<int> size;\n    int n;\n    bool done = 0;\n    dsu(int _n) : n(_n) {\n        par.resize(n);\n        size.assign(n,0);\n        iota(par.begin(), par.end(), 0);\n    } \n    inline int get(int x) {\n        return (x == par[x] ? x : (par[x] = get(par[x])));\n    }\n    inline bool merge(int x, int y) {\n        x = get(x);\n        y = get(y);\n        if (x != y) {\n            par[x] = y;\n            size[y] += (size[x]+1);\n            done = true;\n            return true;\n        }else{\n            size[x]++;\n        }\n        return false;\n    }\n};\nclass Solution {\npublic:\n    int longestCommonSubpath(int n, vector<vector<int>>& paths) {\n        map<pair<int,int>,set<int>> m1;\n        map<int,set<int>> m2;\n        int pos = 0;\n        for(auto path : paths){\n            for(int j = 0;j+1 < path.size();j++){\n                m1[{path[j],path[j+1]}].insert(pos);\n                m2[path[j]].insert(pos);\n                m2[path[j+1]].insert(pos);\n            }\n            pos++;\n        }\n        vector<pair<int,int>> v;\n        for(auto x : m1){\n            cout << x.first.first << \" \" <<x.first.second << \" \" << x.second.size() << endl;\n            if(x.second.size() == paths.size()){\n                v.push_back(x.first);\n            }\n        }\n        bool single = 0;\n        for(auto x : m2){\n            if(x.second.size() == paths.size()){\n                single = 1;\n            }\n        }\n        dsu d(n);\n        for(auto x: v){\n            int u = x.first,v = x.second;\n            bool ans = d.merge(u,v);\n            cout << u << \" v \" << v << \" \" << ans << endl;\n        }\n        \n        int ans = 0;\n        \n        for(int i= 0;i < n;i++){\n            cout << i << \" :  \" << d.get(i) << \" \" << d.size[d.get(i)] << endl;\n            ans = max(ans,d.size[d.get(i)]);\n        }\n        cout << endl;\n        return ans + (single);\n        \n    }\n};","compare_result":"11101111011111111111111111011111111111101111111000000000000000000000000","title_slug":"longest-common-subpath"}