{"id":550062116,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1630879080,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/550062116/","is_pending":"Not Pending","title":"GCD Sort of an Array","memory":"N/A","code":"\nclass dsu {\n    public:\n    vector<int> par;\n    vector<int> size;\n    int n;\n    dsu(int _n) : n(_n) {\n        par.resize(n);\n        iota(par.begin(), par.end(), 0);\n        size.assign(n, 1);\n    } \n    inline int get(int x) {\n        return (x == par[x] ? x : (par[x] = get(par[x])));\n    }\n    inline bool merge(int x, int y) {\n        x = get(x);\n        y = get(y);\n        if (x != y) {\n            if(size[x] < size[y]) swap(x,y);\n            par[y] = x;\n            size[x] += size[y];\n            return true;\n        }\n        return false;\n    }\n};\nclass Solution {\npublic:\n\n    bool gcdSort(vector<int>& nums) {\n        const int N = 1e5+1;\n        int n = nums.size();\n        unordered_map<int,int> m1;\n        m1.reserve(N);\n        for(int c : nums) m1[c]++;\n        dsu d(N);\n        vector<int> vis(N,0);\n        bool ans = true;\n        for(int i = 2;i < N;i++){\n            if(vis[i] != 0) continue;\n            for(int j = i;j < N;j+= i){\n                vis[j] = 1;\n                if(m1[j]) d.merge(i,j);\n            }\n        }\n        vector<int> snums = nums;\n        sort(snums.begin(),snums.end());\n        for(int i = 0;i < n;i++){\n            if(d.get(nums[i])!= d.get(snums[i])) return false;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111000000000000","title_slug":"gcd-sort-of-an-array"}