{"id":415044713,"lang":"cpp","time":"1 year, 1 month","timestamp":1604100368,"status_display":"Accepted","runtime":"1272 ms","url":"/submissions/detail/415044713/","is_pending":"Not Pending","title":"Number of Submatrices That Sum to Target","memory":"9.7 MB","code":"class Solution {\npublic:\n    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {\n        \n        int n = matrix.size();\n        int m = matrix[0].size();\n        \n        int dp[n+1][m+1];\n        memset(dp,0,sizeof(dp));\n        \n        for(int i = 1;i<=n;i++){\n            for(int j = 1;j<=m;j++){\n                dp[i][j] = matrix[i-1][j-1] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1];\n            }\n        }\n        \n        auto sum = [&](int x1,int y1,int x2,int y2){\n            return dp[x2][y2] - dp[x1-1][y2] - dp[x2][y1-1] + dp[x1-1][y1-1];\n        };\n        \n        int fans = 0;\n        for(int i =1;i<=n;i++){\n            for(int j = 1;j<=m;j++){\n                 for(int i2 =i;i2<=n;i2++){\n                    for(int j2 = j;j2<=m;j2++){\n                        if(sum(i,j,i2,j2) == target){\n                            fans += 1;\n                        }\n                    }\n                }   \n            }\n        }\n        return fans;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"number-of-submatrices-that-sum-to-target"}