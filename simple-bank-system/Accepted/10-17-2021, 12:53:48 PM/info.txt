{"id":572543848,"lang":"cpp","time":"2 months, 1 week","timestamp":1634455428,"status_display":"Accepted","runtime":"264 ms","url":"/submissions/detail/572543848/","is_pending":"Not Pending","title":"Simple Bank System","memory":"120.1 MB","code":"class Bank {\npublic:\n    vector<long long> B;\n    Bank(vector<long long>& balance) {\n        B = balance;\n        B.insert(B.begin(),0);\n    }\n    bool validAccount(int account){\n        return 1 <= account && account <= B.size()-1;\n    }\n    \n    bool transfer(int account1, int account2, long long money) {\n        if(!validAccount(account1) || !validAccount(account2)) return false;\n        if(B[account1] < money) return false;\n        B[account1] -= money;\n        B[account2] += money;\n        return true;\n    }\n    \n    bool deposit(int account, long long money) {\n        if(!validAccount(account)) return false;\n        B[account] += money;\n        return true;\n    }\n    \n    bool withdraw(int account, long long money) {\n        if(!validAccount(account)) return false;\n        if(B[account] < money) return false;\n        B[account] -= money;\n        return true;\n    }\n};\n\n/**\n * Your Bank object will be instantiated and called as such:\n * Bank* obj = new Bank(balance);\n * bool param_1 = obj->transfer(account1,account2,money);\n * bool param_2 = obj->deposit(account,money);\n * bool param_3 = obj->withdraw(account,money);\n */","compare_result":"1111111111111111111111","title_slug":"simple-bank-system"}