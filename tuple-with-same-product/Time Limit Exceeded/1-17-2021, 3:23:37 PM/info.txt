{"id":444061592,"lang":"cpp","time":"11 months, 1 week","timestamp":1610877217,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/444061592/","is_pending":"Not Pending","title":"Tuple with Same Product","memory":"N/A","code":"class Solution {\npublic:\n    int tupleSameProduct(vector<int>& nums) {\n        int n = nums.size();\n        \n        unordered_map<int,vector<pair<int,int>>> m1;\n        \n        m1.reserve(1000001);\n        for(int i =0;i<n;i++){\n            for(int j = i+1;j<n;j++){\n                int prod = nums[i] * nums[j];\n                m1[prod].push_back({nums[i],nums[j]});\n            }\n        }\n        int ans = 0;\n        for(auto x : m1){\n            int m = x.second.size();\n            \n            for(int i =0;i<m;i++){\n                unordered_set<int> s;\n                s.insert(x.second[i].first);\n                s.insert(x.second[i].second);\n                for(int j = i+1;j<m;j++){\n                    if(s.find(x.second[j].first) != s.end()) continue;\n                    if(s.find(x.second[j].second) != s.end()) continue;\n                    ans += 8;\n                }\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"tuple-with-same-product"}