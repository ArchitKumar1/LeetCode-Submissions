{"id":323655866,"lang":"cpp","time":"1 year, 8 months","timestamp":1586697546,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/323655866/","is_pending":"Not Pending","title":"Smallest Sufficient Team","memory":"N/A","code":"class Solution {\npublic:\n    #define LL long long int\n    string numtobin(long long int x){\n        string s = \"\";\n        while(x){\n            s += ((x&1) ? \"1\" : \"0\");\n            x>>=1;\n        }\n        reverse(s.begin(),s.end());\n        return s;\n    }\n    map<string,LL> m1;\n    vector<LL> p;\n    LL REQ = 0;\n    LL MS;\n    LL N;\n    LL FANS = 0;\n    LL bits = 1e9;\n    vector<vector<int>> dp;\n    int x = 0;\n    LL solve(LL cnt,LL mask,LL group){\n        x++;\n        LL subset = REQ|mask;\n        // cout << cnt << \" \" << mask << \" \" << subset << \" \" << group <<  endl;\n        \n        if( subset == mask) {\n            LL currbits = __builtin_popcountll(group);  \n            // if(currbits == 1) cout << \"MILA\";\n            if(currbits < bits){\n                bits = currbits;\n                // cout << \"G :\" << group << \" : \" << numtobin(group)<< endl;\n                FANS = group;\n            }\n            return 0;\n            \n        }\n        if(cnt == N) return 1e9;\n        \n        LL found = (mask | p[cnt])!= mask;\n        // cout << mask << \" \" << p[cnt] << \" \"<< found << endl;\n        if(found){\n            LL newm = mask | p[cnt];\n            // cout << \"DEBUG : \" << cnt+1 << \" \" << (numtobin(group|(1LL << cnt)) )<< endl;\n            return dp[cnt][mask] = min(solve(cnt + 1,mask,group),1 + solve(cnt + 1,newm,group|=(1LL<<cnt)));\n        }else{\n            return dp[cnt][mask]= solve(cnt+1,mask,group);\n        }    \n    }\n    vector<int> smallestSufficientTeam(vector<string>& rs, vector<vector<string>>& people) {\n        dp= vector<vector<int>>(65,vector<int>((1<<17),-1));\n        N = people.size();\n        for(auto v : people){\n            for(string s : v){\n                if(m1[s] == 0){\n                    m1[s] = ++MS;\n                }\n            }\n        }\n        \n        for(auto v : people){\n            LL temp = 0LL;\n            for(auto s : v){\n                temp |= (1LL << (m1[s]-1));\n            }\n            p.push_back(temp);\n            temp = 0LL;\n        }\n        \n        for(string s :rs){\n            REQ |= (1LL << (m1[s]-1));\n        }\n\n        cout << \"SOLVE : \" << solve(0LL,0LL,0LL) << endl;\n        cout << \"FANS : \" << FANS << endl;\n        cout << \"bits :\"  << bits<< endl;\n        \n        vector<int> uans;\n        for(int i = 0;i<N;i++){\n            if((FANS & (1LL << i)) >=1) {\n                uans.push_back(i);\n            }\n        }\n        // 111001110101\n        // 101001010101\n        return uans;\n    }\n};","compare_result":"1111111111111111111111111111111111100","title_slug":"smallest-sufficient-team"}