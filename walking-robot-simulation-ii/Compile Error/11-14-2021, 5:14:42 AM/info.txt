{"id":586731366,"lang":"cpp","time":"1 month, 1 week","timestamp":1636847082,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/586731366/","is_pending":"Not Pending","title":"Walking Robot Simulation II","memory":"N/A","code":"#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)\ntemplate<typename Arg1>\nvoid __f(const char* name,Arg1&& arg1){cout<<name<<\" : \"<<arg1<<endl;}\ntemplate<typename Arg1,typename... Args>\nvoid __f(const char* names,Arg1&& arg1,Args&&... args){const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<\" : \"<<arg1<<\" | \";__f(comma+1,args...);}\nclass Robot {\npublic:\n    // R U L D\n    int dx[4] = {1,0,-1,0};\n    int dy[4] = {0,1,0,-1};\n    vector<string> dirs = { \"East\", \"North\" ,\"West\", \"South\"};\n    int n,m;\n\n    int x = 0,y = 0;\n    int dir = 0;\n    \n    int wall(int d,int x,int y){\n        if(d == 0) return n - x;\n        if(d == 1) return m - y;\n        if(d == 2) return x;\n        if(d == 3) return y;\n        return false;\n    }\n    bool isOncorner(){\n        return ((x == 0 and y == 0) ||\n                (x == 0 and y == m) ||\n                (x == n and y == 0) ||\n                (x == n and y == m));\n    }\n    Robot(int width, int height) {\n        n = width -1;\n        m = height -1;\n    }\n    \n    bool onWall(){\n        return x == 0 || y == 0 || x == n || y == m;\n    }\n    void move(int num) {\n        cout << num << endl;\n        while(num > 0){\n            if(isOncorner()){\n                num %= 2*(m+n);\n            }\n            \n            int dist = wall(dir,x,y);\n            if(dist == 0){\n                dir = (dir + 1) % 4;\n                dist = wall(dir,x,y);\n            }\n            trace(num,dist,steps);\n            int steps = min(dist,num);\n            num -= steps;\n            \n            x += dx[dir] * steps;\n            y += dy[dir] * steps;\n            trace(num,x,y);\n         }\n        cout << endl;\n    }\n    \n    vector<int> getPos() {\n        return {x,y};\n    }\n    \n    string getDir() {\n        return dirs[dir];\n    }\n};\n\n/**\n * Your Robot object will be instantiated and called as such:\n * Robot* obj = new Robot(width, height);\n * obj->move(num);\n * vector<int> param_2 = obj->getPos();\n * string param_3 = obj->getDir();\n */","compare_result":null,"title_slug":"walking-robot-simulation-ii"}