{"id":328984754,"lang":"cpp","time":"1 year, 8 months","timestamp":1587640674,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/328984754/","is_pending":"Not Pending","title":"Number of Provinces","memory":"8.9 MB","code":"class Solution {\npublic:\n    \n    vector<int> par;\n    vector<int> size;\n    int get(int v){\n        return (par[v] == v ? v : get(par[v]));\n    }\n    void merge(int a,int b){\n        a = get(a);\n        b = get(b);\n        if(a ==b) return ;\n        if(size[a] < size[b]) swap(a,b);\n        par[b] = a;\n        size[a] += size[b];\n        size[b] = 0;\n    }\n    \n    int findCircleNum(vector<vector<int>>& M) {\n        int n = M.size() + 1;\n        par.assign(n,0);\n        size.assign(n,1);\n        for(int i = 0;i<n;i++){\n            par[i] = i;\n        }\n        int m = M.size();\n        for(int i = 0;i<m;i++){\n            for(int j = 0;j<m;j++){\n                if(M[i][j] == 1){\n                    merge(i,j);\n                }\n            }\n        }\n        set<int> ans;\n        for(int i = 0;i<m;i++){\n            cout << get(i) << \" \" << size[get(i)] << endl;\n            ans.insert(get(i));\n        }\n        return ans.size();\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces"}