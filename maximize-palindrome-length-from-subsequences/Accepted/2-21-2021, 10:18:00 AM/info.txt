{"id":458672043,"lang":"cpp","time":"10Â months","timestamp":1613882880,"status_display":"Accepted","runtime":"232 ms","url":"/submissions/detail/458672043/","is_pending":"Not Pending","title":"Maximize Palindrome Length From Subsequences","memory":"24.1 MB","code":"class Solution {\npublic:\n    int longestPalindrome(string w1, string w2) {\n        \n        string W = w1+w2;\n        int n = W.size();\n        \n        int dp[n][n];\n        memset(dp,0,sizeof(dp));\n        \n        for(int l=0;l<n;l++){\n            for(int i = 0;i+l<n;i++){\n                int j = i+l;\n                if(i == j){\n                    dp[i][j] = 1;\n                }else if(j-i ==1){\n                    dp[i][j] = (W[i] == W[j])?2:1;\n                }else{\n                    if(W[i] == W[j]){\n                        dp[i][j] = 2 + dp[i+1][j-1];\n                    }else{\n                        dp[i][j] = max(dp[i+1][j],dp[i][j-1]);\n                    }\n                    \n                }\n            }\n        }\n        int ans = 0;\n        int n1 = w1.size();\n        int n2 = w2.size();\n\n        for(int i= 0;i<n1;i++){\n            for(int j = n1;j<n;j++){\n                if(W[i] == W[j]){\n                    ans = max(ans,dp[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-palindrome-length-from-subsequences"}