{"id":409989060,"lang":"cpp","time":"1 year, 2 months","timestamp":1602975013,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/409989060/","is_pending":"Not Pending","title":"Shortest Path to Get All Keys","memory":"N/A","code":"class Solution {\npublic:\n    \n    struct s{\n        int i,j,k;\n    };\n    \n    bool lo(char c){\n        return c<='z' && c>='a';\n    }\n    bool hi(char c){\n        return c<='Z' && c>='A';\n    }\n    int shortestPathAllKeys(vector<string>& grid) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        \n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int ans = 0;\n        bool found = 0;\n        \n        queue<s> qq;\n        s start;\n        \n        for(int i = 0;i<n;i++){\n            for(int j = 0;j<m;j++){\n                if(grid[i][j] == '@'){\n                    start.i = i,start.j = j,start.k = 0;\n                }\n            }\n        }\n        \n        map<char,int>m1;\n        int pos = 0;\n        for(int i = 0;i<n;i++){\n            for(int j = 0;j<m;j++){\n                if(lo(grid[i][j])){\n                    m1[grid[i][j]] = pos;\n                    char nc = ('A' + grid[i][j]-'a');\n                    m1[nc] = pos;\n                    pos++;\n                }\n            }\n        }\n        qq.push(start);\n        \n        int dx[4] ={1,0,-1,0};\n        int dy[4] = {0,-1,0,1};\n        \n        int K = 1 << 6;\n        int vis[n][m][K];\n        memset(vis,0,sizeof(vis));\n        \n        while(qq.size()){\n            int sz = qq.size();\n            \n            for(int i = 0;i<sz;i++){\n                s top = qq.front();qq.pop();\n                \n                if(top.i < 0 || top.j < 0 || top.i > n-1 || top.j > m-1) continue;\n                \n                if(vis[top.i][top.j][top.k] == 1) continue;\n                vis[top.i][top.j][top.k] = 1;\n                \n                if(hi(grid[top.i][top.j])){\n                    if((top.k & (1 << m1[grid[top.i][top.j]])) == 0){\n                        continue;\n                    }\n                }\n                if(lo(grid[top.i][top.j])){\n                    top.k |=  (1 << m1[grid[top.i][top.j]]);\n                }\n                \n                if(top.i == n-1 && top.j == m-1){\n                    found = 1;\n                    qq = queue<s>();\n                    break;\n                } \n                for(int k = 0;k<4;k++){\n                    int ii = top.i + dx[k];\n                    int jj = top.j + dy[k];\n                    \n                    s newtop;\n                    newtop.i = ii,newtop.j = jj,newtop.k = top.k;\n                    qq.push(newtop);\n                    \n                }\n            }\n            ans += 1;\n        }\n        return !found?-1:ans-1;\n    }\n};","compare_result":"11011001000000000000000000000000000","title_slug":"shortest-path-to-get-all-keys"}