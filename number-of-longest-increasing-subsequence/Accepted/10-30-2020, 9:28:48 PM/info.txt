{"id":414936798,"lang":"cpp","time":"1 year, 1 month","timestamp":1604073528,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/414936798/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"13.6 MB","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        if(nums.size() == 0) return 0;\n        int n = nums.size();\n        vector<int> dp(n+1,1);\n        vector<int> cnt(n+1,1);\n        \n        dp[1] = 1;\n        cnt[1] = 1;\n        for(int i =1;i<=n;i++){\n            for(int j = 1;j<i;j++){\n                if(nums[i-1] > nums[j-1]){\n                    if(dp[i] < dp[j] + 1){\n                        dp[i] = dp[j] + 1;\n                        cnt[i] = cnt[j];\n                    }else if(dp[i] == dp[j] +1){\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n        }\n        int L = *max_element(dp.begin(),dp.end());\n        int ans = 0;\n        for(int i =1;i<=n;i++){\n            if(dp[i] == L){\n                ans += cnt[i];\n            }\n        }\n        return ans;\n        \n                \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence"}