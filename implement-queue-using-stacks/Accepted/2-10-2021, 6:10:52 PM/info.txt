{"id":454426064,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1612960852,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/454426064/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"6.9 MB","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n        \n    }\n    stack<int> s1,s2;\n    /** Push element x to the back of queue. */\n    void push(int x) {\n        s1.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        if(!s2.size()){\n            while(s1.size()){\n                s2.push(s1.top());\n                s1.pop();\n            }\n        }\n        \n        int x = s2.top();\n        s2.pop();\n        return x;\n        \n    }\n    \n    /** Get the front element. */\n    int peek() {\n        if(!s2.size()){\n            while(s1.size()){\n                s2.push(s1.top());\n                s1.pop();\n            }\n        }\n        \n        int x = s2.top();\n        return x;\n        \n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return !s1.size()&&!s2.size();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11111111111111111111","title_slug":"implement-queue-using-stacks"}