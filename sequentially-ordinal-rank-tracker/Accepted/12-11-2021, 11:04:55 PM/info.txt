{"id":600321554,"lang":"cpp","time":"1 week, 5 days","timestamp":1639244095,"status_display":"Accepted","runtime":"412 ms","url":"/submissions/detail/600321554/","is_pending":"Not Pending","title":"Sequentially Ordinal Rank Tracker","memory":"165.7 MB","code":"#include \"ext/pb_ds/assoc_container.hpp\"\n#include \"ext/pb_ds/tree_policy.hpp\"\nusing namespace __gnu_pbds;\ntemplate<class T> \nusing ordered_set = tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\ntemplate<class key, class value, class cmp = std::less<key>>\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\n\nclass SORTracker {\npublic:\n    int cnt = 0;\n    ordered_set<pair<int,string>> os;\n    SORTracker() {\n        \n    }\n    \n    void add(string name, int score) {\n        os.insert({-score,name});\n    }\n    \n    string get() {\n        return os.find_by_order(cnt++)->second;\n    }\n};\n\n/**\n * Your SORTracker object will be instantiated and called as such:\n * SORTracker* obj = new SORTracker();\n * obj->add(name,score);\n * string param_2 = obj->get();\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sequentially-ordinal-rank-tracker"}