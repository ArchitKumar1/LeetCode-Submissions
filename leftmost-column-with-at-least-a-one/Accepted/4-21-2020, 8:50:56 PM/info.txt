{"id":328142769,"lang":"cpp","time":"1 year, 8 months","timestamp":1587482456,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/328142769/","is_pending":"Not Pending","title":"Leftmost Column with at Least a One","memory":"8.2 MB","code":"/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *   public:\n *     int get(int x, int y);\n *     vector<int> dimensions();\n * };\n */\n\nclass Solution {\npublic:\n    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {\n        vector<int> d = binaryMatrix.dimensions();\n        int n = d[0];\n        int m = d[1];\n        \n//         int ans = INT_MAX;\n//         for(int i = 0;i<n;i++){\n//             int l = 0;\n//             int h = m-1;\n            \n//             int t = INT_MAX;\n//             while(l<=h){\n//                 int mid = (l+h)/2;\n//                 int x = binaryMatrix.get(i,mid);\n//                 if(x == 1){\n//                     t = mid;\n//                     h = mid-1;\n//                 }else{\n//                     l = mid+1;\n//                 }\n//             }\n//             ans = min(ans,t);\n//         }\n//         return ans == INT_MAX ? -1 : ans;\n        \n        int ans = INT_MAX;\n        int x = 0;\n        int y = m-1;\n        \n        while( x >= 0 && x < n && y>=0 && y<m){\n            cout << x << \" \" << y << endl;\n            int g = binaryMatrix.get(x,y);\n            cout << g << endl;\n            if(g == 1){\n                ans = min(ans,y);\n                y--;\n            }else{\n                x++;\n            }\n        }\n        return ans == INT_MAX ? -1 : ans; \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"leftmost-column-with-at-least-a-one"}