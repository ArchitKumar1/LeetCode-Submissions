{"id":395134749,"lang":"cpp","time":"1 year, 3 months","timestamp":1600012896,"status_display":"Accepted","runtime":"908 ms","url":"/submissions/detail/395134749/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"58.2 MB","code":"class Solution {\npublic:\n    \n    struct edge{\n        int x,y,cost;\n        bool operator < (const edge &e) const{\n            return cost < e.cost;\n        }\n    };\n    vector<edge> all;\n    vector<int> par;\n    \n    int f(int v){\n        return (par[v] == v ? v : par[v] = f(par[v]));\n    }\n    void merge(int a,int b){\n        a =f(a),b= f(b);\n        par[a] = b;\n    }\n    int minCostConnectPoints(vector<vector<int>>& points) {\n        int n = points.size();\n        par.assign(n,0);\n        \n        for(int i = 0;i<n;i++){\n            par[i] = i;\n            for(int j =i+1;j<n;j++){\n                edge a;\n                a.x = i,a.y = j;a.cost= abs(points[i][0] -points[j][0]) + abs(points[i][1] -points[j][1]);\n                all.push_back(a);\n            }\n        }\n        int cost = 0;\n        sort(all.begin(),all.end());\n        for(auto e : all){\n            if(f(e.x) != f(e.y)){\n                cost += e.cost;\n                merge(e.x,e.y);\n            }\n        }\n        return cost;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points"}