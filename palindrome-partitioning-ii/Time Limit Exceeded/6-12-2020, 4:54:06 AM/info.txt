{"id":352417307,"lang":"cpp","time":"1 year, 6 months","timestamp":1591917846,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/352417307/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"N/A","code":"class Solution {\npublic:\n    int minCut(string s) {\n        \n        int n = s.size();\n        bool pali[n][n];\n        memset(pali,0,sizeof(pali));\n        \n        for(int  l =0;l<n;l++){\n            for(int i = 0;i+l<n;i++){\n                int j = i+l;\n                if(i == j && s[i] == s[j]) pali[i][j] = 1;\n                else if(i+1 == j && s[i] == s[j]) pali[i][j] = 1;\n                else if(s[i] == s[j] && pali[i+1][j-1]) pali[i][j] = 1;\n            }\n        }\n        int dp[n][n];\n        \n        \n        for(int  l =0;l<n;l++){\n            for(int i = 0;i+l<n;i++){\n                int j = i+l;\n                if(i == j) {\n                    dp[i][j] = 0;\n                    continue;\n                }\n                dp[i][j] = INT_MAX;\n                for(int k = i;k<j;k++){\n                    dp[i][j] = min(dp[i][j],(pali[i][j] ? 0 : 1 + dp[i][k] + dp[k+1][j]));\n                }\n            }\n        }\n        // cout << pali[0][1] << \" \" << pali[2][2] << endl;\n        return dp[0][n-1];\n        \n    }\n};","compare_result":"11111111111111111111111111110","title_slug":"palindrome-partitioning-ii"}