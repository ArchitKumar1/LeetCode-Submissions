{"id":579710113,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1635643703,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/579710113/","is_pending":"Not Pending","title":"Two Best Non-Overlapping Events","memory":"N/A","code":"class Solution {\npublic:\n    int maxTwoEvents(vector<vector<int>>& events) {\n        multiset<int> r,l;\n        int n = events.size();\n        vector<array<int,3>> v;\n        \n        int ans = 0;\n        for(int i = 0;i < n;i++){\n            v.push_back({events[i][1],-1,events[i][2]});\n            v.push_back({events[i][0]-1,1,events[i][2]});\n            r.insert(events[i][2]);\n            ans=max(ans,events[i][2]);\n        }\n    \n        sort(v.begin(),v.end());\n        for(auto arr: v){\n            cout << arr[0] << \" \" << arr[1] << \" \" <<arr[2] << endl;\n            int t = arr[1];\n            int va = arr[2];\n            if(t == -1){\n                l.insert(va);\n            }else{\n                r.erase(r.find(va));\n            }\n            int L = l.size() ? *prev(l.end()) : 0;\n            int R = r.size() ? *prev(r.end()) : 0;\n            ans = max(L + R,ans);\n            cout << ans << \" \"  << l.size() << \" \" << r.size() << endl;\n            cout << endl;\n        }\n        cout << endl;\n        return ans;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111000000000","title_slug":"two-best-non-overlapping-events"}