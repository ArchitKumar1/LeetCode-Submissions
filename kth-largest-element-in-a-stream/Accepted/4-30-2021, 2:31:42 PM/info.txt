{"id":487007442,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1619773302,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/487007442/","is_pending":"Not Pending","title":"Kth Largest Element in a Stream","memory":"33.6 MB","code":"#include \"ext/pb_ds/assoc_container.hpp\"\n#include \"ext/pb_ds/tree_policy.hpp\"\nusing namespace __gnu_pbds;\ntemplate<class T> \nusing ordered_set = tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> ;\ntemplate<class key, class value, class cmp = std::less<key>>\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\n\nclass KthLargest {\npublic:\n    ordered_set<pair<int,int>> os;\n    int pos = 0;\n    int K = 0;\n    \n    KthLargest(int k, vector<int>& nums) {\n        K = k;\n        for(int c : nums){\n            os.insert({c,pos++});\n        }\n    }\n    \n    int add(int val) {\n        os.insert({val,pos++});\n        return (*os.find_by_order(pos - K)).first;\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */","compare_result":"1111111111","title_slug":"kth-largest-element-in-a-stream"}