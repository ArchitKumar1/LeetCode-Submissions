{"id":404315426,"lang":"cpp","time":"1 year, 2 months","timestamp":1601801765,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/404315426/","is_pending":"Not Pending","title":"Even Odd Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> d;\n    int mxd = 0;\n    void dfs(TreeNode* root,int de = 0){\n        if(!root) return;\n        mxd = max(mxd,de);\n        \n        d[de].push_back(root->val);\n        cout << root->val << endl;\n        dfs(root->left,de+1);\n        \n        dfs(root->right,de+1);\n    }\n    bool isEvenOddTree(TreeNode* root) {\n        d.resize(1000000);\n        dfs(root);\n        bool safe = 1;\n        for(int i =0;i<=mxd;i++){\n            if(i&1)reverse(d[i].begin(),d[i].end());\n            for(int j = 1;j<d[i].size();j++){\n                safe&= d[i][j] > d[i][j-1];\n            }\n            for(int 0 = 1;j<d[i].size();j++){\n                if(i&1){\n                    safe&= (d[i][j]%2 == 0);\n                }else{\n                    safe&= (d[i][j]%2 == 1);\n                }\n            }\n            \n        }\n        return safe;\n        \n    }\n};","compare_result":null,"title_slug":"even-odd-tree"}