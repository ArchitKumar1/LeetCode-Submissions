{"id":432553258,"lang":"python3","time":"1Â year","timestamp":1608451981,"status_display":"Accepted","runtime":"2108 ms","url":"/submissions/detail/432553258/","is_pending":"Not Pending","title":"Checking Existence of Edge Length Limited Paths","memory":"61.8 MB","code":"class Solution:\n    \n    \n    class dsu:\n        def __init__(self,n):\n            self.par = [i for i in range(n)]\n        \n        def find(self,x):\n            if(self.par[x] == x):\n                return x\n            else:\n                self.par[x] = self.find(self.par[x])\n                return self.par[x]\n            \n        def merge(self,x,y):\n            x,y = self.find(x),self.find(y)\n            if(x != y):\n                self.par[y] = x;\n        \n            \n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        edgeList.sort(key =lambda x : x[2])\n        for i,q in enumerate(queries):\n            q.append(i)\n            \n        queries.sort(key =lambda x : x[2])\n        \n        ans = [False]*len(queries)\n        \n        D1 =  self.dsu(120000)\n        \n        i=0\n        for u,v,L,idx in queries:\n            while(i < len(edgeList) and edgeList[i][2] < L):\n                D1.merge(edgeList[i][0],edgeList[i][1])\n                i+= 1\n            if(D1.find(u) == D1.find(v)):\n                ans[idx] = True\n        return ans\n                ","compare_result":"111111111111111111111","title_slug":"checking-existence-of-edge-length-limited-paths"}