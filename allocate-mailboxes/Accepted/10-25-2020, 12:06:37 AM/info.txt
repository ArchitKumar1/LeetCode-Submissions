{"id":412666008,"lang":"python3","time":"1 year, 2 months","timestamp":1603564597,"status_display":"Accepted","runtime":"532 ms","url":"/submissions/detail/412666008/","is_pending":"Not Pending","title":"Allocate Mailboxes","memory":"16.2 MB","code":"class Solution:\n    def minDistance(self, houses: List[int], k: int) -> int:\n        \n        n = len(houses)\n        houses = sorted(houses)\n        costs = [[0]*n for i in range(n)]\n        print(costs)\n        for i in range(n):\n            for j in range(n):\n                median = houses[(i+j)//2]\n                for t in range(i,j+1):\n                    costs[i][j] += abs(median-houses[t])\n                    \n        @lru_cache(None)\n        def dp(k,i):\n            if k == 0 and i == n:\n                 return 0\n            if k == 0 or i == n:\n                 return math.inf\n            \n            ans = math.inf\n            for j in range(i,n):\n                 ans = min(ans,costs[i][j] + dp(k-1,j+1))\n            return ans\n            \n        return dp(k,0)\n    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"allocate-mailboxes"}