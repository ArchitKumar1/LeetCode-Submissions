{"id":520458308,"lang":"cpp","time":"5 months, 2 weeks","timestamp":1625950439,"status_display":"Accepted","runtime":"680 ms","url":"/submissions/detail/520458308/","is_pending":"Not Pending","title":"Minimum Cost to Reach Destination in Time","memory":"386.8 MB","code":"\n\nclass Solution {\npublic:\n    int n;\n    vector<vector<pair<int,int>>> G;\n    \n    \n    int minCost(int maxTime, vector<vector<int>>& edges, vector<int>& ps) {\n        int n = ps.size();\n        G.resize(n);\n        for(auto e: edges){\n            G[e[0]].emplace_back(e[1],e[2]);\n            G[e[1]].emplace_back(e[0],e[2]);\n        }\n        vector<vector<int>>dp(1001,vector<int>(1001,1e9));\n        dp[0][0] = ps[0];\n        \n        for(int t=0;t<=maxTime;t++){\n            for(int j = 0;j<n;j++){\n                if(dp[j][t] == 1e9) continue;\n                for(auto[k,c] : G[j]){\n                    int nt = c + t;\n                    if(nt <= maxTime){\n                        dp[k][nt] = min(dp[k][nt],dp[j][t] + ps[k]);\n                    }\n                }\n            }\n        }\n        int ans = *min_element(dp[n-1].begin(),dp[n-1].end());\n        return ans == 1e9 ? -1 :ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-reach-destination-in-time"}