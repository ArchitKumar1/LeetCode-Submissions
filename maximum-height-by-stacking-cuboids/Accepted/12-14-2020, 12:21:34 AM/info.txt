{"id":430284252,"lang":"cpp","time":"1Â year","timestamp":1607885494,"status_display":"Accepted","runtime":"720 ms","url":"/submissions/detail/430284252/","is_pending":"Not Pending","title":"Maximum Height by Stacking Cuboids ","memory":"13 MB","code":"class Solution {\npublic:\n    int maxHeight(vector<vector<int>>& cuboids) {\n        \n        vector<vector<int>> all;\n        int pos = 0;\n        for(auto x : cuboids){\n            sort(x.begin(),x.end());\n            do{\n                all.push_back({x[0],x[1],x[2],pos});\n                cout << x[0] << \" \" << x[1] << \" \" << x[2] << \" \" << pos << endl;\n            }while ( next_permutation(x.begin(),x.end()));\n            pos++;\n        }\n        sort(all.rbegin(),all.rend());\n        \n        \n        auto safe = [&](int i,int j) -> bool{\n            if(all[i][3] == all[j][3]) return 0;\n            for(int k = 0;k<3;k++){\n                if(all[i][k] > all[j][k]) return 0;\n            }\n            return 1;\n        };\n        int n = all.size();\n        vector<int> dp(n+1,0);\n        for(int i = 0;i<n;i++){\n            dp[i] = all[i][2];\n            for(int j = 0;j<i;j++){\n                if(safe(i,j)){\n                    dp[i]= max(dp[i],dp[j] + all[i][2]);\n                }\n            }\n        }\n\n        return *max_element(dp.begin(),dp.end());\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-height-by-stacking-cuboids"}