{"id":368050867,"lang":"cpp","time":"1 year, 5 months","timestamp":1595032174,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/368050867/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution {\npublic:\n    \n    \n    int n,m;\n    vector<vector<int>> M;\n    \n    int dfs(int i,int j){\n        int ans =1 ;\n        int dir[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};\n        for(int k = 0;k<4;k++){\n            int x = i + dir[k][0];\n            int y = j + dir[k][1];\n            if(x < 0 || y < 0 || x >= n || y >= m) continue;\n            if(M[x][y] <= M[i][j]) continue;\n            ans = max(ans,1 + dfs(x,y));\n        }\n        return ans;\n    }\n    int longestIncreasingPath(vector<vector<int>>& ma) {\n        M = ma, n = ma.size(),m = ma[0].size();\n        \n        int ans = 0;\n        for(int i = 0;i<n;i++){\n            for(int j = 0;j<m;j++){\n                ans = max(ans,dfs(i,j));\n            }\n        }\n        return ans;\n    }\n};","compare_result":"110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-increasing-path-in-a-matrix"}