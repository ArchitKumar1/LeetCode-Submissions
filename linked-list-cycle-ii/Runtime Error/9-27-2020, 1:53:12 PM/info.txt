{"id":401321610,"lang":"cpp","time":"1 year, 2 months","timestamp":1601194992,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/401321610/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if(!head) return NULL;\n        ListNode * slow = head;\n        ListNode * fast = head;\n        bool cycle = 0;\n        \n        while(slow && fast){\n            slow = slow->next;\n            if(fast->next) fast = fast->next->next;\n            if(fast == slow){\n                cycle =true;\n                break;\n            }\n        }\n        if(!cycle)return NULL;\n        ListNode * f = head;\n        ListNode * s = slow;\n        \n        cout << f->val << \" \" << s->val << endl;\n        while(f != s){\n            f = f->next;\n            s = s->next;\n               \n        }\n        return f;\n    }\n};","compare_result":"1111111111111000","title_slug":"linked-list-cycle-ii"}