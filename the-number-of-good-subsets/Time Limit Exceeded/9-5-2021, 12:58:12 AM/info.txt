{"id":549494330,"lang":"python3","time":"3 months, 2 weeks","timestamp":1630783692,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/549494330/","is_pending":"Not Pending","title":"The Number of Good Subsets","memory":"N/A","code":"class Solution:\n    \n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2,3,5,7,11,13,17,19,23,29]\n        d = {}\n        for i in range(len(primes)): d[primes[i]]= i\n        n = len(nums)\n        \n        @cache\n        def getprimes(x):\n            ans = []\n            y = x\n            for i in range(2,int(sqrt(x)+1)):\n                while y%i == 0:\n                    y //= i\n                    ans.append(i)\n            if y > 1:\n                ans.append(y)     \n            return ans\n        \n       \n        @cache\n        def dp(mask,i,o):\n            if i == n: return 1 if o == False else 0\n            terms = getprimes(nums[i])\n            newmask = mask\n            safe = True\n            only1 = True\n            ans = 0\n            for t in terms:\n                if (newmask >> d[t]) & 1:\n                    safe = False\n                else:\n                    newmask |= (1 << d[t])\n                    only1 = False\n            if safe:\n                ans += dp(newmask,i+1,only1 & o)\n            ans += dp(mask,i+1,o)\n            return ans % int(10 ** 9 + 7)\n\n        return dp(0,0,True)\n            ","compare_result":"111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000","title_slug":"the-number-of-good-subsets"}