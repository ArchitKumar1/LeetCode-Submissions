{"id":353489452,"lang":"cpp","time":"1 year, 6 months","timestamp":1592126312,"status_display":"Accepted","runtime":"852 ms","url":"/submissions/detail/353489452/","is_pending":"Not Pending","title":"Kth Ancestor of a Tree Node","memory":"135.3 MB","code":"class TreeAncestor {\n    \nprivate : \n    const static int LOGN = 20;\n    \npublic:\n    int n;\n    vector<vector<int>> anc;\n    vector<vector<int>> G;\n    vector<int> depth;\n    \n    void dfs(int s){\n        for(int c : G[s]){\n            depth[c] = depth[s] + 1;\n            anc[0][c] = s;\n            dfs(c);\n        }\n    }\n    TreeAncestor(int n, vector<int>& parent) {\n        depth.assign(n,0);\n        G.resize(n);\n        anc =vector<vector<int>>(LOGN,vector<int>(n,0));\n        this->n = n;\n        \n        // cout << \"mila\" << endl;\n        for(int i = 0;i<n;i++){\n            if(parent[i]!=-1){\n                G[parent[i]].push_back(i);\n            }\n        }\n        dfs(0);\n        for(int i = 1;i<LOGN;i++){\n            for(int j = 0;j<n;j++){\n                anc[i][j] = anc[i-1][anc[i-1][j]];\n            }\n        }\n    }\n    \n    int getKthAncestor(int node, int k) {\n        int ans = node;\n        if(depth[node] - k <  0) return -1;\n        // return 1;\n        int newdepth = depth[node] - k;\n        for(int i = LOGN-1;~i;i--){\n            if(depth[anc[i][ans]] >= newdepth){\n                ans = anc[i][ans];\n            }\n        }\n        return ans;\n    }\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n * int param_1 = obj->getKthAncestor(node,k);\n */","compare_result":"1111111111","title_slug":"kth-ancestor-of-a-tree-node"}