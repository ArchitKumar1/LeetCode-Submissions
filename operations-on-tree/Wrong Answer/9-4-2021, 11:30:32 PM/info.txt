{"id":549458769,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1630778432,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/549458769/","is_pending":"Not Pending","title":"Operations on Tree","memory":"N/A","code":"\nclass LockingTree {\npublic:\n    vector<vector<int>> G;\n    vector<bool> locker;\n    vector<int> who;\n    int N;\n    vector<int> par;\n    LockingTree(vector<int>& parent) {\n        par = parent;\n        N = parent.size();\n        G.resize(N);\n        locker.assign(N,0);\n        who.assign(N,-1);\n        for(int i = 1;i < N;i++){\n            G[parent[i]].push_back(i);\n        }\n    }\n    \n    int dfs(int s){\n        int count = locker[s];\n        for(int c: G[s]){\n            count += dfs(c);\n        }\n        return count;\n    }\n    void set(int s){\n        locker[s] = 0;\n        for(int c: G[s]) set(c);\n    }\n    bool lock(int num, int user) {\n        if(locker[num] == 1) return 0;\n        locker[num] = 1,who[num] = user;\n        return 1;\n    }\n    \n    bool unlock(int num, int user) {\n        if(locker[num] == 0) return 0;\n        if(who[num] != user) return 0;\n        return 1;\n    }\n    bool anc(int num){\n        while(num!=-1){\n            if(locker[num] == 1) return 0;\n            num = par[num];\n        }\n        return 0;\n    }\n    bool upgrade(int num, int user) {\n        if(locker[num] == 1) return 0;\n        int count = dfs(num);\n        cout << count << \" \" << num << \" \" <<user << endl;\n        if(count == 0)return 0;\n        if(anc(num)) return 0;\n        set(num);\n        locker[num] = 1;\n        who[num] = user;\n        return 1;\n    }\n};\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree* obj = new LockingTree(parent);\n * bool param_1 = obj->lock(num,user);\n * bool param_2 = obj->unlock(num,user);\n * bool param_3 = obj->upgrade(num,user);\n */","compare_result":"111111111110001110111111000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000010100101010000000000000000000010","title_slug":"operations-on-tree"}