{"id":318505834,"lang":"cpp","time":"1 year, 8 months","timestamp":1585810616,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/318505834/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"8.4 MB","code":"class Solution {\npublic:\n    string minWindow(string S, string T) {\n    string result;\n    if(S.empty() || T.empty()){\n        return result;\n    }\n    unordered_map<char, int> map;\n    unordered_map<char, int> window;\n    for(int i = 0; i < T.length(); i++){\n        map[T[i]]++;\n    }\n    int minLength = INT_MAX;\n    int letterCounter = 0;\n    for(int slow = 0, fast = 0; fast < S.length(); fast++){\n        char c = S[fast];\n        if(map.find(c) != map.end()){\n            window[c]++;\n            if(window[c] <= map[c]){\n                letterCounter++;\n            }\n        }\n        if(letterCounter >= T.length()){\n            while(map.find(S[slow]) == map.end() || window[S[slow]] > map[S[slow]]){\n                window[S[slow]]--;\n                slow++;\n            }\n            if(fast - slow + 1 < minLength){\n                minLength = fast - slow + 1;\n                result = S.substr(slow, minLength);\n            }\n        }\n    }\n    return result;\n}\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring"}