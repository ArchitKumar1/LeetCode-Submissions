{"id":346259029,"lang":"cpp","time":"1 year, 6 months","timestamp":1590757738,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/346259029/","is_pending":"Not Pending","title":"Minimum Cost to Merge Stones","memory":"N/A","code":"class Solution {\n    const int inf = 1e9;\npublic:\n    int n,K;\n    vector<int> S;\n    vector<int> psum;\n    \n    int solve(int i,int j,int p){\n        // cout << i << \" \" << j << \" \" << p <<endl;\n        if(i == j) {\n            return (p == 1 ? 0 : inf);\n        }\n        int ans = 1e9;\n        if(p == 1){\n            // cout << \"p == 1 \" << i << \" \" << j << \" \" << p <<endl;\n            ans = solve(i,j,K) + psum[j+1] - psum[i];\n        }else{\n            \n            for(int k = i;k<j;k++){\n                ans = min(ans,solve(i,k,p-1) + solve(k+1,j,1));\n            }\n        }\n        return ans;\n            // dp[i][i][1] = 0;\n            // dp[i][j][1] = min over t( dp[i][j][K] + sum[i,j]);\n            // dp[i][j][k] = minover  t(dp[i][t][k-1] + dp[t+1][j][1]);\n        \n    }\n    int mergeStones(vector<int>& stones, int k) {\n        S = stones;\n        n  =stones.size();\n        K = k;\n        psum.assign(n+1,0);\n        for(int i = 1;i<=n;i++){\n            psum[i] = psum[i-1] + stones[i-1];\n        }\n        return solve(0,n-1,1);\n    }\n};","compare_result":"10111111111111011101110110111111111001100000000000000000000000000000000000000000000","title_slug":"minimum-cost-to-merge-stones"}