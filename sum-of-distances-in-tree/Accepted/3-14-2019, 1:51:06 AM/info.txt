{"id":214580206,"lang":"cpp","time":"2 years, 9 months","timestamp":1552508466,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/214580206/","is_pending":"Not Pending","title":"Sum of Distances in Tree","memory":"44.3 MB","code":"class Solution {\npublic:\n    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {\n        vector<unordered_set<int>> tree(N);\n        vector<int> res(N, 0);\n        vector<int> count(N, 0);\n        if (N == 1) return res;\n        for (auto e : edges) {\n            tree[e[0]].insert(e[1]);\n            tree[e[1]].insert(e[0]);\n        }\n        unordered_set<int> seen1, seen2;\n        dfs(0, seen1, tree, res, count);\n        dfs2(0, seen2, tree, res, count, N);\n        return res;\n\n    }\n\n    void dfs(int root, unordered_set<int>& seen, vector<unordered_set<int>>& tree, vector<int>& res, vector<int>& count) {\n        seen.insert(root);\n        for (auto i : tree[root])\n            if (seen.count(i) == 0) {\n                dfs(i, seen, tree, res, count);\n                count[root] += count[i];\n                res[root] += res[i] + count[i];\n            }\n        count[root] += 1;\n    }\n\n    void dfs2(int root, unordered_set<int>& seen, vector<unordered_set<int>>& tree, vector<int>& res, vector<int>& count, int N) {\n        seen.insert(root);\n        for (auto i : tree[root])\n            if (seen.count(i) == 0) {\n                res[i] = res[root] - count[i] + N - count[i];\n                dfs2(i, seen, tree, res, count, N);\n            };\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-distances-in-tree"}