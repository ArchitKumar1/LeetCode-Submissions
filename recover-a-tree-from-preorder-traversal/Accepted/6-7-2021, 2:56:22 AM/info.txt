{"id":504093833,"lang":"python3","time":"6 months, 2 weeks","timestamp":1623014782,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/504093833/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"15 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverFromPreorder(self, traversal: str) -> TreeNode:\n        n = len(traversal)\n        st = []\n        i = 0\n        while i < n:\n            cnt = 0;\n            while i < n and traversal[i] == '-':\n                cnt += 1\n                i += 1\n            val = 0\n            while i < n and traversal[i] !='-':\n                val *= 10\n                val += int(traversal[i])\n                i += 1\n            \n            while st and len(st) > cnt:\n                st.pop()\n            t = TreeNode(val)\n            \n            if st:\n                node = st[-1]\n                if not node.left:\n                    node.left = t\n                else:\n                    node.right = t\n            st.append(t)\n        return st[0]\n            \n                \n            \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal"}