{"id":520995101,"lang":"cpp","time":"5 months, 2 weeks","timestamp":1626040072,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520995101/","is_pending":"Not Pending","title":"Merge BSTs to Create Single BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool safe = 1;\n    void dfs(TreeNode* node,int &mini){\n        \n        if(!node) return;\n        cout << node->val << endl;\n        dfs(node->left,mini);\n        if(node->val > mini){\n            mini = node->val;\n        }else{\n            safe = false;\n        }\n        dfs(node->right,mini);\n    }\n    TreeNode* canMerge(vector<TreeNode*>& trees) {\n         map<int,vector<TreeNode*>> m1;\n        \n        for(auto x : trees){\n            m1[x->val].push_back(x);\n        }\n        for(auto x : trees){\n            //cout << x->val << endl;\n            auto l = x->left;\n            auto r = x->right;\n            if(l){\n                if(!m1[l->val].size()) continue;\n                auto pt = m1[l->val].back();\n                x->left = pt;\n                m1[l->val].pop_back();\n            }\n            if(r){\n                if(!m1[r->val].size())  continue;\n                auto pt = m1[r->val].back();\n                x->right = pt;\n                m1[r->val].pop_back();\n            }\n        }\n        \n        // check if 1 parent is left\n        vector<TreeNode*> lefts;\n        for(auto x : m1){\n            for(auto node : x.second){\n                lefts.push_back(node);\n            }\n        }\n        // cout << \"all\" << endl;\n        if(lefts.size() != 1) return NULL;\n        int mini = INT_MIN;\n        dfs(lefts[0],mini);\n        return safe ? lefts[0] : NULL;\n        \n    }\n};","compare_result":"11111011111111111011101111111111111111111111011111111111111111111111011111111111111111111111101111011111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111110111101111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-bsts-to-create-single-bst"}