{"id":527669239,"lang":"cpp","time":"5Â months","timestamp":1627151512,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/527669239/","is_pending":"Not Pending","title":"The Number of the Smallest Unoccupied Chair","memory":"91.6 MB","code":"#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)\ntemplate<typename Arg1>\nvoid __f(const char* name,Arg1&& arg1){cout<<name<<\" : \"<<arg1<<endl;}\ntemplate<typename Arg1,typename... Args>\nvoid __f(const char* names,Arg1&& arg1,Args&&... args){const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<\" : \"<<arg1<<\" | \";__f(comma+1,args...);}\nclass Solution {\npublic:\n    int smallestChair(vector<vector<int>>& times, int targetFriend) {\n        vector<array<int,3>> v;\n        int n = times.size();\n        int pos = 0;\n        for(auto x : times){\n            v.push_back({x[1],-1,pos});\n            v.push_back({x[0],1,pos});\n            pos++;\n        }\n        sort(v.begin(),v.end());\n        set<int> free;\n        vector<int> seats(n);\n        for(int i = 0;i < n;i++) free.insert(i);\n        for(auto e : v){\n            auto[t,ty,i] = e;\n            if(ty == -1) free.insert(seats[i]);\n            else{\n                int seat = *free.begin();\n                seats[i] = seat;\n                free.erase(free.begin());\n            }\n        }\n        return seats[targetFriend];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"the-number-of-the-smallest-unoccupied-chair"}