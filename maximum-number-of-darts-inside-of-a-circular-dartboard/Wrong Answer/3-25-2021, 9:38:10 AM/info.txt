{"id":472134229,"lang":"cpp","time":"9Â months","timestamp":1616645290,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/472134229/","is_pending":"Not Pending","title":"Maximum Number of Darts Inside of a Circular Dartboard","memory":"N/A","code":"#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)\ntemplate<typename Arg1>\nvoid __f(const char* name,Arg1&& arg1){cout<<name<<\" : \"<<arg1<<endl;}\ntemplate<typename Arg1,typename... Args>\nvoid __f(const char* names,Arg1&& arg1,Args&&... args){const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<\" : \"<<arg1<<\" | \";__f(comma+1,args...);}\nclass Solution {\npublic:\n    vector<double> findCircle(int x1, int y1, int x2, int y2, int x3, int y3){\n        int x12 = x1 - x2;\n        int x13 = x1 - x3;\n        int y12 = y1 - y2;\n        int y13 = y1 - y3;\n        int y31 = y3 - y1;\n        int y21 = y2 - y1;\n        int x31 = x3 - x1;\n        int x21 = x2 - x1;\n        int sx13 = pow(x1, 2) - pow(x3, 2);\n        int sy13 = pow(y1, 2) - pow(y3, 2);\n        int sx21 = pow(x2, 2) - pow(x1, 2);\n        int sy21 = pow(y2, 2) - pow(y1, 2);\n\n        int f = ((sx13) * (x12)\n                 + (sy13) * (x12)\n                 + (sx21) * (x13)\n                 + (sy21) * (x13))\n                / (2 * ((y31) * (x12) - (y21) * (x13)));\n        int g = ((sx13) * (y12)\n                 + (sy13) * (y12)\n                 + (sx21) * (y13)\n                 + (sy21) * (y13))\n                / (2 * ((x31) * (y12) - (x21) * (y13)));\n\n        int c = -pow(x1, 2) - pow(y1, 2) - 2 * g * x1 - 2 * f * y1;\n        int h = -g;\n        int k = -f;\n        int sqr_of_r = h * h + k * k - c;\n        double r = sqrt(sqr_of_r);\n        return vector<double>({(double)h,(double)k,r});\n    }\n    \n    bool collinear(int x1, int y1, int x2, \n               int y2, int x3, int y3){\n        int a = x1 * (y2 - y3) + \n                x2 * (y3 - y1) + \n                x3 * (y1 - y2);\n        return a==0;\n    }\n    \n    bool inside(double x,double y,double h,double k,double r){\n         double dist = (x-h)*(x-h)+(y-k)*(y-k);\n         return dist <= (double)r*r;\n    }\n    int numPoints(vector<vector<int>>& points, int r) {\n        \n        int n = points.size();\n        int ans = 0;\n        for(int i =0;i<n;i++){\n            for(int j =i+1;j<n;j++){\n                for(int k =j+1;k<n;k++){\n                    int x1 = points[i][0], y1= points[i][1];\n                    int x2 = points[j][0], y2= points[j][1];\n                    int x3 = points[k][0], y3= points[k][1];\n                    //trace(x1,y1,x2,y2,x3,y3);\n                    if(collinear(x1,y1,x2,y2,x3,y3)) continue;\n                    vector<double> c = findCircle(x1,y1,x2,y2,x3,y3);\n                    double H = c[0],K = c[1],r = c[2];\n                    //trace(H,K,r);\n                    int tans = 0;\n                    for(int l = 0;l<n;l++){\n                        int x = points[l][0],y = points[l][1];\n                        tans += inside(x,y,H,K,r);\n                    }\n                    ans = max(ans,tans);\n                }\n            }\n        }\n        return ans;\n    }\n};","compare_result":"11000011100000010100000000000000000000000000000000000000000000000","title_slug":"maximum-number-of-darts-inside-of-a-circular-dartboard"}