{"id":347315271,"lang":"cpp","time":"1 year, 6 months","timestamp":1590965039,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/347315271/","is_pending":"Not Pending","title":"Maximum Number of Darts Inside of a Circular Dartboard","memory":"N/A","code":"class Solution {\npublic:\n    \n    double cx,cy;\n    double r;\n    void findCircle(int x1, int y1, int x2, int y2, int x3, int y3) \n    { \n        int x12 = x1 - x2; \n        int x13 = x1 - x3; \n\n        int y12 = y1 - y2; \n        int y13 = y1 - y3; \n\n        int y31 = y3 - y1; \n        int y21 = y2 - y1; \n\n        int x31 = x3 - x1; \n        int x21 = x2 - x1; \n\n        // x1^2 - x3^2 \n        int sx13 = pow(x1, 2) - pow(x3, 2); \n\n        // y1^2 - y3^2 \n        int sy13 = pow(y1, 2) - pow(y3, 2); \n\n        int sx21 = pow(x2, 2) - pow(x1, 2); \n        int sy21 = pow(y2, 2) - pow(y1, 2); \n\n        int f = ((sx13) * (x12) \n                 + (sy13) * (x12) \n                 + (sx21) * (x13) \n                 + (sy21) * (x13)) \n                / (2 * ((y31) * (x12) - (y21) * (x13))); \n        int g = ((sx13) * (y12) \n                 + (sy13) * (y12) \n                 + (sx21) * (y13) \n                 + (sy21) * (y13)) \n                / (2 * ((x31) * (y12) - (x21) * (y13))); \n\n        int c = -pow(x1, 2) - pow(y1, 2) - 2 * g * x1 - 2 * f * y1; \n        int h = -g; \n        int k = -f; \n        int sqr_of_r = h * h + k * k - c; \n\n        // r is the radius \n        double radius = sqrt(sqr_of_r); \n\n        cx = h;\n        cy = k;\n        r = radius;\n    } \n    \n    bool in(int x,int y){\n        double dist = pow(cx-x,2) + pow(cy-y,2) - r*r;\n        return dist <=0;\n    }\n    \n    int numPoints(vector<vector<int>>& p, int r) {\n        int n = p.size();\n        int best = 0;\n        for(int i =0 ;i+2<n;i++){\n            for(int j = i+1;j+1<n;j++){\n                for(int k = j+1;k<n;k++){\n                    findCircle(p[i][0],p[i][1],p[j][0],p[j][1],p[k][0],p[k][1]);\n                    int curr = 0;\n                    for(int l = 0;l<n;l++){\n                        if(in(p[l][0],p[l][1])) curr++;\n                    }\n                    best = max(best,curr);\n                }\n            }\n        }\n        return best;\n    }\n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-number-of-darts-inside-of-a-circular-dartboard"}